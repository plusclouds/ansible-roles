---

- name: Install MySQL-Python(for RedHat based systems)
  package: pkg={{ item }} state=present update_cache=yes
  with_items:
    - MySQL-python
  when: ansible_os_family == 'RedHat'

- name: Install python-mysqldb (for Debian based systems)
  apt: pkg={{ item }} state=present update_cache=yes
  with_items:
    - python-pycurl
    - python-mysqldb
  when: ansible_os_family == 'Debian'

- name: create a backup
  mysql_db:
    name: "{{ src_database_name }}"
    state: dump
    target: "/home/{{ src_database_name }}.sql.gz"
    login_host: "{{ src_database_host }}"
    login_port: "{{ src_database_port }}"
    login_user: "{{ src_database_user }}"
    login_password: "{{ src_database_password }}"


# - name: Dump database to /home path
#   command: mysqldump -u {{ src_database_user }} -p "{{ src_database_password }}" "{{ src_database_name }}" > /home/{{ src_database_name }}.sql.gz


- name: Drop database
  mysql_db:
    name: "{{ src_database_name }}"
    state: absent
    login_host: "{{ dst_database_host }}"
    login_port: "{{ dst_database_port }}"
    login_user: "{{ dst_database_user }}"
    login_password: "{{ dst_database_password }}"
  when: force_drop_database

- name: check if DB exists
  shell: mysql --host={{ dst_database_host }} --user={{ dst_database_user }} --password={{ dst_database_password }} --port={{ dst_database_port }} -e 'SHOW DATABASES;' | grep -c {{ src_database_name }}
  register: dbstatus
  failed_when: dbstatus.rc == 2

- name: Restore database
  mysql_db:
    name: "{{ src_database_name }}"
    state: import
    target: "/home/{{ src_database_name }}.sql.gz"
    login_host: "{{ dst_database_host }}"
    login_port: "{{ dst_database_port }}"
    login_user: "{{ dst_database_user }}"
    login_password: "{{ dst_database_password }}"


# - name: Import database to remote host
#   shell: mysql -h host -u user_name -pPassword database < file.sql
