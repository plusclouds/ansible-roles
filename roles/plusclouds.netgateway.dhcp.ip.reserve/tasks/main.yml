---
- name: Install nmap if not installed
  apt:
    name: nmap
    state: present

- name: Discover Ip Adresses
  shell: nmap -n -sn {{ network_ip_addr }}{{ network_subnet }} -oG - | awk '/Up$/{print $2}'
  register: ip_addresses

- set_fact:
    ip_addr: "{{ ip_addresses.stdout_lines }}"

# STORING IP ADDRESSES

- name: Store ip address as reserved
  uri:
    url: http://{{leo_url}}/v2/packetbender/ip
    method: POST
    headers:
      Authorization: "Bearer {{ user_token }}"
    body: "is_reserved=1&ip_addr={{ item }}&network_ref={{ network.id }}"
    return_content: yes
    status_code: 201
    timeout: 300
  with_items: "{{ ip_addr }}"
  delegate_to: localhost
  ignore_errors: yes

# SEARCHING FOR MAC ADDRESS OF IP ADDRESS

- name: Search for mac address of related ip
  shell: arping -c 1 {{ item }} | grep from | awk {'print$4'} | sort -u
  register: mac_address
  with_items: "{{ ip_addr }}"
  ignore_errors: yes

- set_fact:
     macs: "{{ mac_address.results | map(attribute='stdout') | list }}"

- set_fact:
    host_network_info: "{{ host_network_info | default([]) + [dict(mac=item[0], ip=item[1])] }}"
  loop: "{{ macs | zip(ip_addr) | list }}"

- name: Store ip address as reserved
  uri:
    url: http://{{leo_url}}/v2/packetbender/ip/set-mac-and-ip
    method: POST
    headers:
      Authorization: "Bearer {{ user_token }}"
    body: "allow=1&auto_configuration=0&ip_addr={{ item.ip }}&mac_addr={{ item.mac }}"
    return_content: yes
    status_code: 201
    timeout: 300
  with_items: "{{ host_network_info }}"
  delegate_to: localhost
  ignore_errors: yes