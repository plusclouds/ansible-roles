---
- name: Update Package and Install curl, python-mysqldb, python-pycurl, software-properties-common
  apt: pkg={{ item }} state=present update_cache=yes
  with_items:
    - curl
    - software-properties-common
    - python-pycurl
    - python-mysqldb
    - perl-modules
    - python-software-properties

- name: Allow Fw Rules
  include_tasks: fwrules.yml

- name: Ubuntu 14.04 trusty mariadb 10.2 stable add key and repo.
  include_tasks: ubuntu_trusty_mariadb_repokey.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'

- name: Ubuntu 16.04 xenial mariadb 10.2 stable add key and repo.
  include_tasks: ubuntu_xenial_mariadb_repokey.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'xenial'

- name: Debian 7 Wheezy mariadb 10.2 stable add key and repo.
  include_tasks: debian_wheezy_mariadb_repokey.yml
  when: ansible_distribution == 'Debian' and ansible_distribution_release == 'Wheezy'

- name: Debian 8 Jessie mariadb 10.2 stable add key and repo.
  include_tasks: debian_jessie_mariadb_repokey.yml
  when: ansible_distribution == 'Debian' and ansible_distribution_release == 'Jessie'

- name: Install MariaDB 10.2 Server and Client
  apt: pkg={{ item }} state=present update_cache=yes force=yes
  with_items:
    - mariadb-server

- name: update mariadb root password for all root accounts
  mysql_user: name=root host={{ ansible_hostname }} password={{ mysql_root_password }}
  when: ansible_hostname != 'localhost'

- name: update mariadb root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_password }}
  with_items:
   - 127.0.0.1
   - ::1
   - localhost

- name: Create .my.cnf for ansible user
  become: false
  template: src=.my.cnf.j2 dest=~/.my.cnf

- name: Add cluster conf to config file
  become: false
  template: src=cluster.cnf.j2 dest=/etc/mysql/conf.d/cluster.cnf
- name: stopping mysql services
  service:
    name: mysql
    state: stopped
- name: starting node on first node
  shell: "service mysql start --wsrep-new-cluster"
  when: "'first_node' in group_names"

- name: restart mysql
  service: 
    name: mysql
    state: restarted
  when: "'other_nodes' in group_names"
